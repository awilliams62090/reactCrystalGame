{"version":3,"sources":["components/CrystalPictures.js","components/Scores.js","components/Header.js","components/HistoricData.js","components/Wrapper.js","App.js","serviceWorker.js","index.js"],"names":["CrystalPics","props","react_default","a","createElement","className","src","image","alt","name","value","onClick","score","id","Scores","target","yScore","Header","Data","wins","losses","Wrapper","children","App","state","crystals","values","componentDidMount","_this","update","newTarget","Math","floor","random","newValue","map","num","setState","handleClick","console","log","concat","newScore","newWins","newLoss","_this2","this","components_Header","components_Scores","components_Wrapper","crystal","CrystalPictures","picture","key","HistoricData","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c901c6b8.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction CrystalPics(props) {\n    return(\n        <div className=\"card\">\n            <img className=\"card-img-top\" \n            src={props.image} \n            alt={props.name}\n            value={props.value}\n            onClick={() => props.score(props.id, props.value)}/>\n        </div>\n    )\n\n}\n\nexport default CrystalPics;","import React from \"react\";\n\n\nfunction Scores (props) {\n    return(\n        <div className=\"targetScoreValue\">\n            <h3> Target Score: {props.target}</h3>\n            <h3> Your Score: {props.yScore}</h3>\n        </div>\n    )\n\n};\n\nexport default Scores","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"header\">\n      <h1>Welcome to the Crystal Game</h1>\n      <p>The goal of the game is to match the target number exactly. Each crystal has a secret value assigned to it. See if you can win the game!</p>\n    </div>\n  )\n};\n\nexport default Header;\n","import React from \"react\";\n\n\nfunction Data (props) {\n    return(\n        <div className=\"scoreValue\">\n            <h3> Wins: {props.wins}</h3>\n            <h3> Losses: {props.losses}</h3>\n        </div>\n    )\n\n};\n\nexport default Data;","import React from \"react\";\n\nfunction Wrapper(props) {\n  return (\n    <div className=\"row\">\n     <div className=\"col-1\"></div>\n      <div className=\"col-10\">\n        <div className=\"wrapper\">{props.children}</div>\n      </div>\n    </div>\n  );\n}\n\nexport default Wrapper;\n","import React, { Component } from \"react\";\nimport CrystalPics from \"./components/CrystalPictures\";\nimport Scores from \"./components/Scores\";\nimport Header from \"./components/Header\"\nimport crystals from \"./crystals.json\";\nimport Data from \"./components/HistoricData\"\nimport Wrapper from \"./components/Wrapper\"\nimport './App.css';\nclass App extends Component {\n\n  state= {\n    crystals,\n    target: 0, \n    score: 0, \n    wins: 0, \n    losses: 0, \n    values: [0,0,0,0],\n  }\n\n  componentDidMount = () => {\n    this.update();\n  }\n\n  update = () => {\n    let newTarget = Math.floor(Math.random() * (120-20+1))+20;\n    let newValue = this.state.values.map(num => (num = Math.floor(Math.random() * 12)+1));\n    this.setState({ target: newTarget, values: newValue });\n  }\n\n  handleClick = (id, value) =>{\n    console.log(`in handleClick id:${id} value:${value}`);\n  //add to your score\n  let newScore = this.state.score + value;\n  \n  //check if you win or lose \n  if (newScore === this.state.target){\n    let newWins = this.state.wins + 1;\n    this.setState({ score:0, wins: newWins})\n    this.update();\n  } else if (newScore > this.state.target){\n    let newLoss = this.state.losses +1;\n    this.setState({ score: 0, losses: newLoss}); \n    this.update();\n  } else{\n  this.setState({ score: newScore});\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Scores target={this.state.target} yScore={this.state.score}/>\n        <Wrapper>\n          {/* Map over crystals from the crystals.json -> this.state.crystals */}\n          {this.state.crystals.map(crystal => (\n            <CrystalPics\n              className=\"image\"\n              image={crystal.picture}\n              name= {crystal.name}\n              id={crystal.id}\n              key={crystal.id}\n              value={this.state.values[crystal.id]}\n              score= {this.handleClick}\n              />\n          ))}        \n        </Wrapper>\n        <Data wins={this.state.wins} losses={this.state.losses}/>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}